//first appraoch with O(m^2n^2) //https://www.youtube.com/watch?v=wJUjIdS23U0 helpful to understand
class Solution {
    public int numSubmatrixSumTarget(int[][] arr, int target) {
        int m = arr.length;
        int n = arr[0].length;
        for(int i = 0;i<m;i++){
            for(int j = 0;j<n;j++){
                int up = i-1>=0?arr[i-1][j]:0;
                int left = j-1>=0?arr[i][j-1]:0;
                int up_left = (i-1>=0 && j-1>=0)?arr[i-1][j-1]:0;
                arr[i][j] = up+left-up_left+arr[i][j];
            }
        }
        // for(int i = 0;i<m;i++){
        //     for(int j = 0;j<n;j++){
        //         System.out.print(arr[i][j]+" ");
        //     }System.out.println();
        // }
        int ans = 0;
        for(int r1 = 0;r1<m;r1++){
            for(int c1 = 0;c1<n;c1++){
                for(int i = r1;i<m;i++){
                    for(int j = c1;j<n;j++){
                        int up = r1-1>=0?arr[r1-1][j]:0;
                        int left= c1-1>=0?arr[i][c1-1]:0;
                        int up_left=(r1-1>=0 && c1-1>=0)?arr[r1-1][c1-1]:0;
                        int currSum = arr[i][j] - up - left +up_left;
                        if(currSum == target){
                            ans++;
                        }
                    }
                }
            }
        }
        return ans;
    }
}
//Second method with O(m^2n) //using subarrays with k target using hashmap;
class Solution {
    public int numSubmatrixSumTarget(int[][] arr, int target) {
        int m = arr.length;
        int n = arr[0].length;
        for(int i = 0;i<m;i++){
            for(int j = 0;j<n;j++){
                int up = i-1>=0?arr[i-1][j]:0;
                int left = j-1>=0?arr[i][j-1]:0;
                int up_left = (i-1>=0 && j-1>=0)?arr[i-1][j-1]:0;
                arr[i][j] = up+left-up_left+arr[i][j];
            }
        }
        int ans = 0;
        for(int r1 = 0;r1<m;r1++){
            for(int r2 = r1;r2<m;r2++){
                HashMap<Integer,Integer> map = new HashMap();
                map.put(0,1);
                for(int c2 = 0 ;c2<n;c2++){
                    int up = r1-1>=0?arr[r1-1][c2]:0;
                    int curr = arr[r2][c2] - up;
                    int abc = curr-target;
                    if(map.containsKey(abc)){
                        ans+=map.get(abc);
                    }
                    map.put(curr,map.getOrDefault(curr,0)+1);
                }
            }
        }
        return ans;
    }
}
