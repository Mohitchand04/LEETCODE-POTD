//2385. Amount of Time for Binary Tree to Be Infected
https://leetcode.com/problems/amount-of-time-for-binary-tree-to-be-infected/description/?envType=daily-question&envId=2024-01-10

1st - 2 time pass method
class Solution {
//i made a map of all the nodes with its adjacent nodes
    public void convert(TreeNode curr,int parent,Map<Integer,Set<Integer>> map){
        if(curr==null){
            return ;
        }
        if(!map.containsKey(curr.val)){
            map.put(curr.val,new HashSet<>());
        }
        Set<Integer> set = map.get(curr.val);
        if(parent!=0){
            set.add(parent);
        }
        if(curr.left!=null){
            set.add(curr.left.val);
        }
        if(curr.right!=null){
            set.add(curr.right.val);
        }
        convert(curr.left,curr.val,map);
        convert(curr.right,curr.val,map);
    }
    public int amountOfTime(TreeNode root, int start) {
        Map<Integer,Set<Integer>> map = new HashMap<>();
        convert(root,0,map);
        Queue<Integer> q = new LinkedList<>();
        q.add(start);
        int min=0;
        Set<Integer> vis = new HashSet<>();
        vis.add(start);

        while(!q.isEmpty()){
            int lsize = q.size();
            while(lsize>0){
                int curr = q.poll();
                for(int num : map.get(curr)){
                   if(!vis.contains(num)){
                        vis.add(num);
                        q.add(num);
                   }
                }
                lsize--;
            }
            min++;
        }
        return min-1;
    }
}

2nd - Depth method
//int this the left and right depth of the start node is calculated and max is returned.
class Solution {
    private int maxDistance = 0;
    public int amountOfTime(TreeNode root, int start) {
        traverse(root, start);
        return maxDistance;
    }

    public int traverse(TreeNode root, int start) {
        int depth = 0;
        if (root == null) {
            return depth;
        }

        int leftDepth = traverse(root.left, start);
        int rightDepth = traverse(root.right, start);

        if (root.val == start) {
            maxDistance = Math.max(leftDepth, rightDepth);
            depth = -1;
        } else if (leftDepth >= 0 && rightDepth >= 0) {
            depth = Math.max(leftDepth, rightDepth) + 1;
        } else {
            int distance = Math.abs(leftDepth) + Math.abs(rightDepth);
            maxDistance = Math.max(maxDistance, distance);
            depth = Math.min(leftDepth, rightDepth) - 1;
        }

        return depth;
    }
}
