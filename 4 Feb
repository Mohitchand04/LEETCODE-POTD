// using HashMap but TLE
class Solution {
    public String minWindow(String s, String t) {
        HashMap<Character,Integer> tMap = new HashMap();
        for(int i = 0;i<t.length();i++){
            tMap.put(t.charAt(i),tMap.getOrDefault(t.charAt(i),0)+1);
        }
        int len = Integer.MAX_VALUE;
        int si = -1;
        int ei = -1;
        for(int i = 0;i<s.length();i++){
            if(tMap.containsKey(s.charAt(i))){
                int j = i;
                HashMap<Character,Integer> tempMap = new HashMap<>();
                tempMap.putAll(tMap);
                while(!tempMap.isEmpty() && j<s.length()){
                    if(tempMap.containsKey(s.charAt(j))){
                        tempMap.put(s.charAt(j),tempMap.get(s.charAt(j))-1);
                        if(tempMap.get(s.charAt(j))==0){
                            tempMap.remove(s.charAt(j));
                        }
                    }
                    j++;
                }
                if(tempMap.isEmpty()){
                    if(j-i<len){
                        len = j-i;
                        si = i;ei=j;
                    }
                }
            }
        }
        if(si == -1 || ei == -1){
            return "";
        }
        return s.substring(si,ei);
    }
}

// using array instead of map 
class Solution {
    public String minWindow(String s, String t) {
        if (s == null || t == null || s.length() == 0 || t.length() == 0 ||
                s.length() < t.length()) {
            return new String();
        }
        int[] map = new int[128];
        int count = t.length();
        int start = 0, end = 0, minLen = Integer.MAX_VALUE, startIndex = 0;
        for (char c : t.toCharArray()) {
            map[c]++;
        }
        char[] chS = s.toCharArray();
        while (end < chS.length) {
            if (map[chS[end++]]-- > 0) {
                count--;
            }
            while (count == 0) {
                if (end - start < minLen) {
                    startIndex = start;
                    minLen = end - start;
                }
                if (map[chS[start++]]++ == 0) {
                    count++;
                }
            }
        }
        return minLen == Integer.MAX_VALUE ? new String() :
                new String(chS, startIndex, minLen);
    }
}
